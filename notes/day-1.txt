https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/

C# (CSharp)
	- object oriented programming language
	- type safe language
	- case-sensitive language
	- high level programming language

Framework:
	platform	to code, compile, test and deploy an application following some rules or guidelines
	- platform neutrality
	- crosss language and technology interoperability
	Note: DotNet provides CTS (Common Type System)=> a data type system in IL (Intemediate language code)
	DotNet languages follow a common guideline - CLS (Common language Specification)

	Microsoft => DotNet (.NET Framework - 2002)
	Programming Languages: VB.NET, VC#.NET, VF#.NET, VJ#.NET, VC++.NET, ...
	S/W: Integrated Development Environment (IDE) => Visual Studio 2022
	
	components:
	a. Library => Base Class Library/Framework Library (BCL/FCL)
	b. CLR => Common Language Runtime
	c. ASP.NET => mini web-framework in .NET Frameowrk to create web applications (Active Server Pages .NET)
	d. ADO.NET => data access technology (ActiveX Data Object .NET)
	e. User Interface: 

	Note: mscorlib.dll => microsoft common object runtime library
	mscoree.dll => microsoft common object runtime execution engine


Basics
	- data types
	- operators
	- control flow statements
	- array
OOP
Advanced

							data types
-------------------------------------------------------------

Value Type								Reference Type
----------------------------------------------------------------------
built-in	user-defined			built-in	user-defined
byte		struct					String		class 
sbyte		enum					Object		interface
short											delegate
ushort											event
int
uint
long
ulong

float (8)
decimal (16)
double (32)

char
bool
DateTime
TimeSpan

Operators:
	logical: && || 
	relational: >, < >= <=
	equality: == !=
	arithmetic: + - * / %
	assignment: += -= *= /= %=

	unary: ++, --
	ternary: ?:

	int res = a>b?a:b;


control flow statements:
	if..else, nested if else
	switch
	while(condition){}
	do{}while(condition);
	for(int i=0;i<3;i++){}
	foreach(int item in arr){}

Conversion:
	implicit conversion: 
   short s = 12;
	int i = s;

	Console.WriteLine(12);
	
	explicit conversion:
	string s = "12";
	int val = int.Parse(s);

	explicit conversion technique:
	Convert class methods (static) => anything to something
	Parse method => used to convert string to something

	char and many other data types do have lots of static methods
	char => IsUpper(), IsLower(), ToUpper(), ToLower(), Parse, TryParse
	int => Parse, TryParse

	best practices:
	a. naming convention of class (upper-case camel casing or pascal casing), methods(upper-case camel casing or pascal casing), local variables (lowercase camel  casing)
	b. clas name should be like: noun, method names should be like: verb
	c. single responsibility - class and methods

	debugging: 
	set breakpoint, line by line execution => step into (F11) and step over (F10)
	debug windows: 
		Locals window=> shows all local variables in the method currently getting executed
		Autos window=> shows all local variables in the code line currently getting executed/in focus
		Watch window=> shows values of local variable(s) in the method currently getting executed. but you have to type the name of the variable(s)
	   Quick Watch window=> shows value(s) of local variable(s) in the method currently getting executed by right clicking on the variable name(s) in the code editor.

	static class: a class declared with static keyword must have all members static. You can't create instance of this class. Can be imported (using) statically using new feature of C#, known as, static import feature
	static class A{}
	using static namespacename.A;

	namespace:
	Logical name to group co-related types
	By default the namespace name of an application is same as that of the application name itself, which can be changed.

	public class DbDataReader{}
	public class FileDataReader{}

	public class Rectangle{}
	public class Triangle{}
	




	


	

	

	